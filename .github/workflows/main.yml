name: production-deploy

on:
  push:
    branches: [main]

jobs:
  build:
    name: build app
    runs-on: ubuntu-latest

    steps:
      - name: checkout code
        uses: actions/checkout@v3

      - name: use nodejs 16
        uses: actions/setup-node@v3
        with:
          node-version: 16
          
      - name: create .env file
        run: |
          echo "NODE_ENV=production" > .env
          echo "PORT=${{ vars.PORT_APP }}" >> .env
          echo "HOST_NAME=${{ vars.HOST_NAME_APP }}" >> .env
          echo "BASE_URI=${{ vars.BASE_URI }}" >> .env
          echo "PUBLIC_PATH=${{ vars.PUBLIC_PATH }}" >> .env

      - name: install dependencies
        run: npm install
        
      - name: build app
        run: npm run build

  babel:
    name: recompile with Babel
    runs-on: ubuntu-latest
    
    defaults:
      run:
        working-directory: app

    needs: [build]

    steps:
      - name: checkout code
        uses: actions/checkout@v3

      - name: use nodejs 14
        uses: actions/setup-node@v3
        with:
          node-version: 14
          
      - name: create .babelrc file
        run: |
          echo '{ "presets": [ [ "@babel/preset-env", { "targets": { "node": "14" } } ], "@babel/preset-react" ] }' > .babelrc

      - name: install babel dependencies
        run: npm install --save-dev @babel/core @babel/preset-env @babel/preset-react babel-loader

      - name: recompile with babel
        run: npx babel . --out-dir ./babel-output --copy-files

      - name: deploy app
        uses: SamKirkland/FTP-Deploy-Action@4.3.3
        with:
          server: fluttercurve.com
          username: ${{ secrets.FTP_USER_APP }}
          password: ${{ secrets.FTP_PASS_APP }}
          local-dir: ./babel-output/
          exclude: |
            **/.git*/**
            **/node_modules/**
            **/src/**
            .eslintrc.json
            .gitignore
            README.md
            package-lock.json
            postcss.config.js
            tailwind.config.js
            tsconfig.json
            yarn.lock
